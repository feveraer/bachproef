@misc{Long2016,
author = {Long, Josh},
title = {{Distributed Tracing with Spring Cloud Sleuth and Spring Cloud Zipkin}},
url = {https://spring.io/blog/2016/02/15/distributed-tracing-with-spring-cloud-sleuth-and-spring-cloud-zipkin},
year = {2016}
}
@techreport{Sambasivan2014,
abstract = {End-to-end tracing captures the work ow of causally-related activity (e.g., work done to process a request) within and among the components of a distributed system. As distributed systems grow in scale and complexity, such tracing is becoming a critical tool for management tasks like diagnosis and resource accounting. Drawing upon our experiences building and using end-to-end tracing infrastructures, this paper distills the key design axes that dictate trace utility for important use cases. Developing tracing infrastructures without explicitly understanding these axes and choices for them will likely result in infrastructures that are not useful for their intended purposes. In addition to identifying the design axes, this paper identi es good design choices for various tracing use cases, contrasts them to choices made by previous tracing implementations, and shows where prior implementations fall short. It also identi es remaining challenges on the path to making tracing an integral part of distributed system design.},
author = {Sambasivan, Raja R. and Fonseca, Rodrigo and Shafer, Ilari and Ganger, Gregory R.},
pages = {25},
title = {{So, you want to trace your distributed system? Key design insights from years of practical experience}},
url = {http://www.pdl.cmu.edu/PDL-FTP/SelfStar/CMU-PDL-14-102.pdf},
year = {2014}
}
@article{Sigelman2010,
abstract = {Modern Internet services are often implemented as complex, large-scale distributed systems. These applications are constructed from collections of software modules that may be developed by different teams, perhaps in different programming languages, and could span many thousands of machines across multiple physical facilities. Tools that aid in understanding system behavior and reasoning about performance issues are invaluable in such an environment. Here we introduce the design of Dapper, Googles production distributed systems tracing infrastructure, and describe how our design goals of low overhead, application-level transparency, and ubiquitous deployment on a very large scale system were met. Dapper shares conceptual similarities with other tracing systems, particularly Magpie 3 and X-Trace 12, but certain design choices were made that have been key to its success in our environment, such as the use of sampling and restricting the instrumentation to a rather small number of common libraries. The main goal of this paper is to report on our experience building, deploying and using the system for over two years, since Dappers foremost measure of success has been its usefulness to developer and operations teams. Dapper began as a self-contained tracing tool but evolved into a monitoring platform which has enabled the creation of many different tools, some of which were not anticipated by its designers. We describe a few of the analysis tools that have been built using Dapper, share statistics about its usage within Google, present some example use cases, and discuss lessons learned so far.},
author = {Sigelman, Benjamin H and Andr, Luiz and Burrows, Mike and Stephenson, Pat and Plakal, Manoj and Beaver, Donald and Jaspan, Saul and Shanbhag, Chandan},
doi = {dapper-2010-1},
file = {:C$\backslash$:/Users/Frederic/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sigelman et al. - 2010 - Dapper, a Large-Scale Distributed Systems Tracing Infrastructure(5).pdf:pdf},
issn = {{\textless}null{\textgreater}},
journal = {Google Research},
number = {April},
pages = {14},
title = {{Dapper , a Large-Scale Distributed Systems Tracing Infrastructure}},
url = {https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf},
year = {2010}
}
@article{DockerCompose2015,
author = {{Docker Inc.}},
pages = {1--6},
title = {{Overview of Docker Compose}},
url = {https://docs.docker.com/compose/overview/},
year = {2015}
}
@misc{DevoxxTracing2016,
title = {{Devoxx Poland 2016 - Marcin Grzejszczak - Microservices tracing with Spring Cloud and Zipkin - YouTube}},
url = {https://www.youtube.com/watch?v=eQV71Mw1u1c},
year = {2016}
}

@Misc{Spring2014,
  author    = {{Pivotal Software}, Inc.},
  title     = {{Spring Framework}},
  year      = {2014},
  booktitle = {Https://Projects.Spring.Io/Spring-Framework/},
  url       = {https://projects.spring.io/spring-framework/},
}

@Misc{SpringCloud2015,
  author    = {{Pivotal Software}, Inc.},
  title     = {{Spring Cloud}},
  year      = {2015},
  booktitle = {English},
  url       = {http://projects.spring.io/spring-cloud/},
  urldate   = {2016-12-28},
}

@Misc{SpringBoot2015,
  author    = {{Pivotal Software}, Inc.},
  title     = {{Spring Boot}},
  year      = {2015},
  abstract  = {SummaryA developer-focused guide to writing applications using Spring Boot. You'll learn how to bypass the tedious configuration steps so that you can concentrate on your application's behavior.About the TechnologyThe Spring Framework simplifies enterprise Java development, but it does require lots of tedious configuration work. Spring Boot radically streamlines spinning up a Spring application. You get automatic configuration and a model with established conventions for build-time and runtime dependencies. You also get a handy command-line interface you can use to write scripts in Groovy. Developers who use Spring Boot often say that they can't imagine going back to hand configuring their applications.About the BookSpring Boot in Action is a developer-focused guide to writing applications using Spring Boot. In it, you'll learn how to bypass configuration steps so you can focus on your application's behavior. Spring expert Craig Walls uses interesting and practical examples to teach you both how to use the default settings effectively and how to override and customize Spring Boot for your unique environment. Along the way, you'll pick up insights from Craig's years of Spring development experience.What's InsideDevelop Spring apps more efficientlyMinimal to no configurationRuntime metrics with the ActuatorCovers Spring Boot 1.3About the ReaderWritten for readers familiar with the Spring Framework.About the AuthorsCraig Walls is a software developer, author of the popular book Spring in Action, Fourth Edition, and a frequent speaker at conferences.},
  booktitle = {English},
  isbn      = {978-1-61729-254-5},
  url       = {https://projects.spring.io/spring-boot/},
}

@Misc{YTZipkin2016,
  title = {{Schibsted Tech: An introduction to distributed tracing and Zipkin - YouTube}},
  year  = {2016},
  url   = {https://www.youtube.com/watch?v=f9J1Av8rwCE},
}

@Misc{Zipkin2016,
  title   = {{OpenZipkin {\textperiodcentered} A distributed tracing system}},
  url     = {http://zipkin.io/},
  urldate = {2017-01-12},
}
@misc{Docker2016,
author = {Docker},
title = {{What is Docker?}},
url = {https://www.docker.com/what-docker},
urldate = {2017-01-12},
year = {2016}
}

@Comment{jabref-meta: databaseType:biblatex;}
